# Get editor completions based on the config schema
"$schema" = "https://starship.rs/config-schema.json"

# A minimal left prompt
format = """
[‚ï≠](fg:grey) $directory\
$fill\
$status\
$jobs\
$time\
\n\
([‚îÇ](fg:grey) \
$shell\
$username\
$hostname\
$os\
$vcsh\
$git_branch\
$git_commit\
$git_state\
$git_metrics\
$git_status\
$hg_branch\
$localip\
$shlvl\
$singularity\
$kubernetes\
$docker_context\
$package\
$c\
$cmake\
$cobol\
$daml\
$dart\
$deno\
$direnv\
$dotnet\
$elixir\
$elm\
$erlang\
$golang\
$haskell\
$helm\
$java\
$julia\
$kotlin\
$lua\
$nim\
$nodejs\
$ocaml\
$perl\
$php\
$pulumi\
$purescript\
$python\
$raku\
$rlang\
$red\
$ruby\
$rust\
$scala\
$swift\
$terraform\
$vlang\
$vagrant\
$zig\
$buf\
$nix_shell\
$conda\
$meson\
$spack\
$memory_usage\
$aws\
$gcloud\
$openstack\
$azure\
$env_var\
$crystal\
$custom\
$sudo\
$battery\
$container\
$cmd_duration\
\n)\
[‚ï∞](fg:grey) """

# Use custom format
# format = """
# [‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ>](bold green)
# [‚îÇ](bold green)$directory$rust$package
# [‚îî‚îÄ>](bold green) """

# Inserts a blank line between shell prompts
add_newline = true
# Wait milliseconds for starship to check files under the current directory.
scan_timeout = 50
# Timeout for commands executed by starship (in milliseconds).
command_timeout = 1000
continuation_prompt = "[‚ñ∂‚ñ∂](grey) "
palette = "p3"

# Define custom colors
[palettes.p3]
black = '#101012'
grey1 = '#18191B'
grey2 = '#242629'
grey3 = '#34373B'
grey4 = '#484D52'
grey = '#6C6F7F'
white = '#ACAFB4'
green = '#63D846'
orange = '#D75F00'
blue = '#689AFD'
cyan = '#7FD6DF'
purple = '#765ADA' # '#574AB2',
yellow = '#C3B11A' # '#E3D888' '#FFE787' '#D1D0A3'
red = '#BF3100' # #CF371F

lightYellow = '#FFFFED'
lightGreen = '#C4D697'
lightPurple = '#B197D6'

darkGreen = '#13230c'
darkBlue = '#181928'
darkCyan = '#0c1820'
darkRed = '#1F0909'    # '#340009'
darkYellow = '#212100'
darkOrange = '#371B00'
darkPurple = '#180225'

[palettes.sRGB]
black = '#101012'
grey1 = '#18191B'
grey2 = '#242629'
grey3 = '#34373B'
grey4 = '#474D53'
grey = '#6B6F80'
white = '#ABAFB5'
green = '#00DB1B'
orange = '#E85500'
blue = '#589CFF'
cyan = '#5DD9E1'
purple = '#7B59E2'
yellow = '#C7B000'
red = '#D01A00'

lightYellow = '#FFFFEB'
lightGreen = '#C0D78F'
lightPurple = '#B696DB'

darkGreen = '#0D2409'
darkBlue = '#181929'
darkCyan = '#081821'
darkRed = '#220708'
darkYellow = '#212100'
darkOrange = '#3B1900'
darkPurple = '#1B0127'

# [custom.pwd]
# disabled = true
# when = true
# command = "echo $PWD"
# format = '[$output](fg:green) '

[fill]
symbol = "‚Äî"
style = "grey"
disabled = false

[cmd_duration]
min_time = 5_000                    # Show command duration over 10,000 milliseconds (=10 sec)
format = '[Û∞îü$duration]($style) '

[directory]
disabled = false
truncation_length = 0
truncate_to_repo = false # Whether or not to truncate to the root of the git repo that you're currently in.
format = "[$path]($style) ([$read_only]($read_only_style) )"
home_symbol = '~'
use_os_path_sep = true
read_only = "Û∞åæ"
read_only_style = "yellow"
style = 'green'

[git_branch]
format = '[$symbol$branch(\($remote_name:$remote_branch\)) ]($style)'
symbol = "Ôáí "
style = "purple"
always_show_remote = false # Shows the remote tracking branch name, even if it is equal to the local branch name.
truncation_length = 15
truncation_symbol = "‚Ä¶"
only_attached = true

[git_commit]
format = '([Ôáí \($hash\) $tag]($style) )'
commit_hash_length = 8
style = "purple"
only_detached = true
tag_disabled = false
tag_symbol = "ÔÄ´ "

# [git_state]
# format = '[\($state( $progress_current of $progress_total)\)]($style) '

[git_status]
conflicted = "‚â†${count} "
ahead = '‚á°${count}'
diverged = '‚áï‚á°${ahead_count}‚á£${behind_count}'
behind = '‚á£${count}'
untracked = "ÔÑ®${count} "
stashed = "S${count} "
modified = "‚ú±${count} "
staged = "+${count} "
renamed = "R${count} "
deleted = "-${count} "
format = '([$conflicted$stashed$deleted$renamed$staged$modified$untracked$ahead_behind]($style) )'
style = "purple"

[time]
disabled = false
format = "[ÓÇ∂](fg:green)[ÔÄó $time](fg:black bg:green)[ÓÇ¥](fg:green)"
use_12hr = false
time_format = "%T"
utc_time_offset = "local"

[jobs]
format = "[ÓÇ∂]($style)[(Jobs $number)](fg:black bg:$style)[ÓÇ¥]($style)"
style = 'cyan'
number_threshold = 1
symbol_threshold = 1

[username]
disabled = false
style_user = "green"
style_root = "yellow bold"
format = "[Ó¥µ $user]($style)"
show_always = true
detect_env_vars = ["SSH_CONNECTION", "SSH_CLIENT", "SSH_TTY", "SUDO_USER"]

[hostname]
disabled = false
ssh_only = false
format = "[@$hostname ]($style)"
ssh_symbol = "Û∞£Ä "
detect_env_vars = ["SSH_CONNECTION", "SSH_CLIENT", "SSH_TTY", "SUDO_USER"]
trim_at = "-"
style = "dimmed green"

[os]
disabled = true
format = '[(OS\($name\) )]($style)'
style = "blue"

[shell]
disabled = true
fish_indicator = 'Û∞à∫'
bash_indicator = 'Óûï'
powershell_indicator = 'Ôë†_'
unknown_indicator = '(mystery shell)'
format = "[$indicator]($style) "
style = 'cyan'

[status]
symbol = 'üò±'
success_symbol = ''
format = "[ÓÇ∂]($style)[($symbol$common_meaning$signal_name:$status)](fg:black bg:$style)[ÓÇ¥]($style)"
style = 'red'
map_symbol = true
disabled = false

[sudo]
disabled = true
style = 'bold green'
format = "[as $symbol]($style)"
symbol = 'üíª '

[c]
format = "[$symbol($version(-$name) )]($style)"
symbol = "Óòû "

[elm]
format = "[$symbol($version )]($style)"
symbol = "Óò¨ "

[erlang]
format = "[$symbol($version )]($style)"
symbol = "Óû± "

[lua]
format = "[$symbol($version )]($style)"
symbol = 'Û∞¢± '

[ruby]
format = "[$symbol($version )]($style)"
symbol = "Óàæ "

[docker_context]
format = "[$symbol($context )]($style)"
symbol = "Ôàü "

[nodejs]
format = "[$symbol($version )]($style)"
symbol = "Û∞éô "

[direnv]
disabled = false
format = '[$symbol(\($loaded/$allowed\))]($style)'
symbol = "direnv"

[package]
format = "[$symbol($version )]($style)"
symbol = "Û∞èó "

[cmake]
format = "[$symbol($version )]($style)"
symbol = "Óô≥ "

[python]
format = '[$symbol$pyenv_prefix($version )(\($virtualenv\) )]($style)'
symbol = "Ó¥õ "

[golang]
format = "[$symbol($version )]($style)"
symbol = "Óòß "

[helm]
format = '[$symbol(\($version\) )]($style)'
symbol = "helm"

[java]
format = "[$symbol($version )]($style)"
symbol = "Ó∂Ø "

[nix_shell]
format = '[$symbol$state( \($name\))]($style) '
symbol = "Ôåì "

[rust]
format = "[$symbol($version )]($style)"
symbol = "Óöã "

[zig]
format = "[$symbol($version )]($style)"
symbol = "Óö© "

[kubernetes]
format = '[$symbol$context(\($namespace\) )]($style)'
symbol = "Û±Éæ "

[shlvl]
disabled = false
format = "[$symbol$shlvl]($style) "
symbol = "ÓØä "
threshold = 2
